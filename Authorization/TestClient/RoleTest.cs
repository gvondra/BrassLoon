using BrassLoon.Interface.Authorization;
using BrassLoon.Interface.Authorization.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Account = BrassLoon.Interface.Account;

namespace BrassLoon.Authorization.TestClient
{
    public class RoleTest
    {
        private readonly SettingsFactory _settingsFactory;
        private readonly AppSettings _settings;
        private readonly Account.ITokenService _tokenService;
        private readonly IRoleService _roleService;

        public RoleTest(SettingsFactory settingsFactory, AppSettings settings, Account.ITokenService tokenService, IRoleService roleService)
        {
            _settingsFactory = settingsFactory;
            _settings = settings;
            _tokenService = tokenService;
            _roleService = roleService;
        }

        public async Task Execute()
        {
            if (string.IsNullOrEmpty(AccessToken.Get.GetGoogleIdToken()))
                await GoogleLogin.Login(_settings);
            string accessToken = await _tokenService.Create(_settingsFactory.CreateAccount(AccessToken.Get.GetGoogleIdToken()));
            AuthorizationSettings settings = _settingsFactory.CreateAuthorization(accessToken);
            List<Role> roles = await _roleService.GetByDomainId(settings, _settings.AuthorizationDomainId.Value);
            Role testRole = roles.FirstOrDefault(r => Regex.IsMatch(r.Name, @"^TestClient\s*Generated", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(200)));
            if (testRole == null)
            {
                testRole = new Role
                {
                    Comment = "Generated by test client",
                    DomainId = _settings.AuthorizationDomainId.Value,
                    IsActive = true,
                    Name = $"TestClient Generated {DateTime.Now:O}",
                    PolicyName = "tstclnt:gen"
                };
                testRole = await _roleService.Create(settings, testRole);
            }
            string newName = $"TestClient Generated {DateTime.Now:O}";
            Console.WriteLine($"Changing name to: {newName}");
            testRole.Name = newName;
            testRole = await _roleService.Update(settings, testRole);
            Console.WriteLine($"Update responded with name: {testRole.Name}");
            roles = await _roleService.GetByDomainId(settings, _settings.AuthorizationDomainId.Value);
            testRole = roles.FirstOrDefault(r => Regex.IsMatch(r.Name, @"^TestClient\s*Generated", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(200)));
            Console.WriteLine($"Get responded with name: {testRole?.Name ?? string.Empty}");
        }
    }
}
